@model CapstoneProject.Models.MoviesViewModel
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims;

<!doctype html>
<html lang="en">
<head>
    <title>@ViewData["Title"] = "Movie";</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <style>
        .reviews {
            padding-bottom: 50px;
        }
        .movie-poster {
            width: 100%;
            height: 100%;
        }
        .rating-color {
            color: #e6cd28;
        }
        .user-details {
            text-align: center;
        }
        .modal {
            color: black;
        }

        .card-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            padding: 20px; /* Adjust as needed */
        }

        .theater-card {
            width: 400px; /* Set the card width as needed */
            margin-bottom: 20px; /* Add space between cards */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border: 1px solid #ddd; /* Add border style */
            border-radius: 8px; /* Add border radius for rounded corners */
            background-color: #f0f8ff; /* Light blue background color */
        }

        .card-body {
            padding: 15px;
        }

        .card-title {
            font-size: 1.2rem;
            margin-bottom: 10px;
        }

        .card-text {
            margin-bottom: 5px;
        }

        

        .badge-container {
            position: relative;
            width: 100%;
            height: 0;
            padding-top: 0%;
        }

        .price-badge {
            position: absolute;
            top: 3px;
            right: 3px;
            width: 50px; /* Adjust the size of the badge as needed */
            height: 50px; /* Adjust the size of the badge as needed */
            border-radius: 50%;
            background-color: #007bff; /* Set the background color of the badge */
            color: #fff; /* Set the text color */
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 14px; /* Adjust the font size */
            line-height: 1; /* Center the text vertically */
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
</head>

<body>
    <section>
        <div class="container">
            <div class="mt-4 p-5 bg-dark rounded">
                <div class="row">
                    <div class="col-sm-4">
                        <img src="@Model.MovieDetails.PosterImageUrl" alt="@Model.MovieDetails.Title" style="width: -webkit-fill-available;">
                    </div>
                    <div class="col-sm-8" style="color: white;">
                        <h2>@Model.MovieDetails.Title</h2><br/>
                        <p>@Model.MovieDetails.Description</p>
                        <div class="row">
                            <div class="col-sm-6">
                                <h4>More details:</h4>
                                <p>Release Date: @Model.MovieDetails.ReleaseDate.ToString("yyyy-MM-dd")</p>
                                <p>Writer: @Model.MovieDetails.Writer</p>
                                <p>Director: @Model.MovieDetails.Director</p>
                                <p>Actors: @Model.MovieDetails.Actores</p>
                                <p>Language: @Model.MovieDetails.Language</p>
                                <p>RunTime: @Model.MovieDetails.RunTime</p>
                                <p>Box Office: @Model.MovieDetails.BoxOffice</p>
                                @{
                                    double averageRating = Model.MovieReviews.Any() ? Model.MovieReviews.Average(r => r.UserRate) : 0;
                                }
                                <p>Average movie rating: @averageRating.ToString("0.00")</p>

                                
                            </div>
                            <div class="col-sm-6">
                                <h4>Trailer:</h4>
                                @if (Model.MovieTrailers != null && Model.MovieTrailers.Any())
                                {
                                    var officialTrailer = Model.MovieTrailers.FirstOrDefault(trailer => trailer.name.Contains("Trailer"));

                                    <script>
                                        console.log("Official Trailer:", @Json.Serialize(officialTrailer));
                                    </script>

                                    @if (officialTrailer != null)
                                    {
                                        <iframe id="trailerVideo" class="trailerVideo" width="300" height="200" src="https://www.youtube.com/embed/@officialTrailer.Key?autoplay=0&mute=1" frameborder="0" allowfullscreen></iframe>
                                    }
                                    else
                                    {
                                        <p>No official trailer available</p>
                                    }
                                }
                                else
                                {
                                    <p>No trailers available</p>
                                }
                            </div>
                        </div>
                    </div>
                </div><br>
                <div class="row">
                    <div>
                        <h4 style="color: white">Theaters and Prices</h4>
                        <div class="card-container">
                            @if (Model.Prices != null && Model.Prices.Any())
                            {
                                @foreach (var theaterPrice in Model.Prices.OrderBy(tp => tp.TicketPrice))
                                {
                                    <div class="theater-card">
                                        <div class="badge-container">
                                            <div class="price-badge">
                                                <p>$@theaterPrice.TicketPrice.ToString()</p>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <p><strong>Theater Name:</strong> @theaterPrice.Theaters.Name</p>
                                            <p><strong>Theater City:</strong> @theaterPrice.Theaters.City</p>
                                            <p><strong>Theater Location:</strong> @theaterPrice.Theaters.Location</p>
                                            <p><strong>Theater Address:</strong> @theaterPrice.Theaters.Address</p>
                                            <p><strong>Show Time:</strong> @theaterPrice.ShowTime.ToString("yyyy-MM-dd HH:mm:ss")</p>
                                            <p><strong>Seats Available:</strong> @theaterPrice.SeatsAvailable</p>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <p style="color: white">No shows available currently!</p>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="container reviews">
                <br>
                <h4>User Reviews</h4>
                <ul class="list-group">
                    <!-- Reviews in database -->
                    @if (Model.MovieReviews != null && Model.MovieReviews.Any())
                    {
                        @foreach (var review in Model.MovieReviews.OrderByDescending(r => r.Timestamp))
                        {
                            var userDetails = await Model.UserManager.FindByIdAsync(review.UserId);
                            <li class="list-group-item">
                                <div class="row">
                                    <div class="col-sm-4 user-details">
                                        <p>@userDetails.UserName</p>
                                        <!-- Keeping space for a profile photo of user. To be added later. -->
                                        <svg width="32px" height="32px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <circle opacity="0.5" cx="12" cy="9" r="3" stroke="#1C274C" stroke-width="1.5"></circle> <circle cx="12" cy="12" r="10" stroke="#1C274C" stroke-width="1.5"></circle> <path opacity="0.5" d="M17.9691 20C17.81 17.1085 16.9247 15 11.9999 15C7.07521 15 6.18991 17.1085 6.03076 20" stroke="#1C274C" stroke-width="1.5" stroke-linecap="round"></path> </g></svg>
                                    </div>
                                    <div class="col-sm-8">
                                        <p>Review: @review.Comment</p>
                                        <div class="row">
                                            <div class="col-sm-6">
                                                <span>Rating: @review.UserRate</span>
                                                @for (int i = 0; i < @review.UserRate; i++)
                                                {<i class="fa fa-star rating-color"></i>}
                                                @for (int i = 0; i < 5 - @review.UserRate; i++)
                                                {<i class="fa fa-star"></i>}

                                            </div>
                                            <div class="col-sm-6" style="text-align: right;">
                                                <p>@review.Timestamp.ToString("yyyy-MM-dd")
                                                <script>
                                                    var reviewDate = new Date("@review.Timestamp.ToString("yyyy-MM-ddTHH:mm:ss")");
                                                    var currentDate = new Date();
                                                    var timeDifference = currentDate - reviewDate;
                                                    var daysAgo = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
                                                    document.write("  (" + daysAgo + " days ago)");
                                                </script>
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </li>
                        }
                    }
                    else
                    {
                       <li class="list-group-item">Be the first one to review!</li> 
                    }
                </ul>
                <br>
                @if (User.Identity.IsAuthenticated)
                {
                    <!-- Button to Open the Modal -->
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#review">
                        Write a review
                    </button>
                    
                    <!-- The Modal -->
                    <div class="modal" id="review">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content">
                        
                                <!-- Modal Header -->
                                <div class="modal-header">
                                <h4 class="modal-title">Write a review</h4>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>

                                @using (Html.BeginForm("PostReview", "Reviews", FormMethod.Post, new {id = "reviewForm", @class = "needs-validation", nonvalidate = "true"}))
                                {
                                    @Html.AntiForgeryToken()
                                        <input type="hidden" name="movieId" value="@Model.MovieDetails.Id" />
                                        <input type="hidden" name="userId" value="@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value" />
                                    <!-- Modal body -->
                                    <div class="modal-body">
                                        <!-- Rating with drag option -->
                                        
                                            <label for="userRate">Rating (between 1 to 5):</label>
                                            <input type="range" id="userRate" name="userRate" min="1" max="5">
                                            <div class="mb-3 form-group ">
                                                <label for="comment">Enter review:</label>
                                                <textarea class="form-control" name="comment" id="comment" rows="3" placeholder="Enter review ..."></textarea>
                                            </div>
                                    </div>
                            
                                    <!-- Modal footer -->
                                    <div class="modal-footer">
                                        <button type="submit" class="btn btn-success" data-bs-dismiss="modal" id="submitButton">Submit</button>
                                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                                    </div>
                                }                                
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <a href="/Identity/Account/Login" class="btn btn-link">
                        <!-- Button to Open the Modal -->
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#review">
                            Write a review
                        </button>
                    </a>
                }
            </div>
        </div>
    </section>
</body>
</html>
